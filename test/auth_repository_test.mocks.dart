// Mocks generated by Mockito 5.5.1.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:supabase_flutter/src/supabase.dart' as _i3;
import 'package:supabase/src/gotrue.dart' as _i2;


/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i3.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoTrueClient get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeGoTrueClient_0(),
      ) as _i2.GoTrueClient);
  @override
  // ignore: invalid_use_of_internal_member
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GoTrueClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoTrueClient extends _i1.Mock implements _i2.GoTrueClient {
  MockGoTrueClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.AuthState> get onAuthStateChange => (super.noSuchMethod(
        Invocation.getter(#onAuthStateChange),
        returnValue: _i4.Stream<_i2.AuthState>.empty(),
      ) as _i4.Stream<_i2.AuthState>);
  @override
  _i4.Future<_i2.AuthResponse> signUp({
    required String? email,
    required String? password,
    String? phone,
    Map<String, dynamic>? data,
    String? emailRedirectTo,
    String? captchaToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
            #phone: phone,
            #data: data,
            #emailRedirectTo: emailRedirectTo,
            #captchaToken: captchaToken,
          },
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_1()),
      ) as _i4.Future<_i2.AuthResponse>);
}

class _FakeGoTrueClient_0 extends _i1.SmartFake implements _i2.GoTrueClient {
  _FakeGoTrueClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthResponse_1 extends _i1.SmartFake implements _i2.AuthResponse {
  _FakeAuthResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}
